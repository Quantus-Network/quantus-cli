---
name: Continuous Integration

on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "LICENSE"
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "LICENSE"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  fast-checks:
    name: üèÅ Fast Checks (Format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install required components
        run: rustup component add rustfmt --toolchain nightly
      - name: Install taplo
        run: cargo install taplo-cli --locked
      - name: Run format checks
        run: |
          taplo format --check --config taplo.toml
          cargo +nightly fmt --all -- --check

  build-and-test-matrix:
    name: üõ†Ô∏è Build & Test Matrix
    needs: fast-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        rust:
          - stable
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -yqq
          sudo apt-get install -yqq --no-install-recommends \
            libclang-dev \
            protobuf-compiler
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install protobuf
      - name: Build (all features)
        run: cargo build --locked --all-features
      - name: Build (library only, no default features)
        run: cargo build --lib --locked --no-default-features
      - name: Build (CLI only)
        run: cargo build --locked --features cli
      - name: Test (all features)
        run: cargo test --locked --all-features
      - name: Test (library only, no default features)
        run: cargo test --lib --locked --no-default-features

  analysis:
    name: ü§ñ Analysis (Clippy & Doc)
    needs: fast-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rust-src
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies
        run: |
          sudo apt-get update -yqq
          sudo apt-get install -yqq --no-install-recommends \
            libclang-dev \
            protobuf-compiler
      - name: Run clippy (all targets and features)
        run: cargo clippy --all-targets --all-features --locked -- -D warnings
      - name: Run clippy (library only, no default features)
        run: cargo clippy --lib --no-default-features --locked -- -D warnings
      - name: Generate documentation (all features)
        run: cargo doc --locked --no-deps --all-features
      - name: Check documentation (with private items)
        run: cargo doc --locked --no-deps --all-features --document-private-items

  security-audit:
    name: üîí Security Audit
    needs: fast-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
      - name: Run security audit
        run: cargo audit

  examples:
    name: üìö Examples
    needs: fast-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies
        run: |
          sudo apt-get update -yqq
          sudo apt-get install -yqq --no-install-recommends \
            libclang-dev \
            protobuf-compiler
      - name: Build examples
        run: |
          cargo build --examples --locked
      - name: Check example compilation
        run: |
          for example in examples/*.rs; do
            example_name=$(basename "$example" .rs)
            echo "Checking example: $example_name"
            cargo check --example "$example_name" --locked
          done